{"version":3,"sources":["components/card/Card.js","components/grid/Grid.js","components/searchbox/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","monster","name","id","email","className","src","alt","Grid","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","this","filteredMonsters","filter","toLowerCase","includes","fetch","then","response","json","users","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yUAaeA,MAXf,SAAcC,GAAQ,IAAD,EACSA,EAAMC,QAA1BC,EADW,EACXA,KAAMC,EADK,EACLA,GAAIC,EADC,EACDA,MAClB,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAG,+BAA0BH,EAA1B,aAAyCI,IAAI,YACrD,4BAAKL,GACL,2BAAIE,KCMKI,MAXf,SAAcR,GAAQ,IACZS,EAAaT,EAAbS,SACR,OACE,yBAAKJ,UAAU,QACZI,EAASC,KAAI,SAAAT,GACZ,OAAO,kBAAC,EAAD,CAAMU,IAAKV,EAAQE,GAAIF,QAASA,S,MCQhCW,MAbf,YAAmD,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aAChC,OACE,yBAAKT,UAAU,cACb,2BACEA,UAAU,eACVU,KAAK,OACLF,YAAaA,EACbG,SAAUF,MC+BHG,EApCf,kDACE,aAAe,IAAD,8BACZ,gBAQFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SARtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJH,EADhB,qDAaY,IAAD,EAC2BI,KAAKD,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZK,EAAmBhB,EAASiB,QAAO,SAAAzB,GAAO,OAC9CA,EAAQC,KAAKyB,cAAcC,SAASR,EAAYO,kBAElD,OACE,yBAAKtB,UAAU,OACb,wBAAIA,UAAU,oBAAd,oBACA,kBAAC,EAAD,CACEQ,YAAY,kBACZC,aAAcU,KAAKV,eAErB,kBAAC,EAAD,CAAML,SAAUgB,OAzBxB,0CA6BuB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKd,SAAS,CAAEV,SAAUwB,WAhC/C,GAAyBC,aCOLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b57a29e4.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\nfunction Card(props) {\n  const { name, id, email } = props.monster;\n  return (\n    <div className='card-container'>\n      <img src={`https://robohash.org/${id}?set=set2`} alt='monster' />\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport './Grid.css';\nimport Card from '../card/Card';\nfunction Grid(props) {\n  const { monsters } = props;\n  return (\n    <div className='grid'>\n      {monsters.map(monster => {\n        return <Card key={monster.id} monster={monster} />;\n      })}\n    </div>\n  );\n}\n\nexport default Grid;\n","import React from 'react';\nimport './SearchBox.css';\n\nfunction SearchBox({ placeholder, handleChange }) {\n  return (\n    <div className='search-box'>\n      <input\n        className='input center'\n        type='text'\n        placeholder={placeholder}\n        onChange={handleChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Grid from './components/grid/Grid';\nimport SearchBox from './components/searchbox/SearchBox';\n\nexport class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n    //this.handleChange = this.handleChange.bind(this); // binds the context of \"this\" to the handleChange function\n    // not needed if the function is an arrow function (ES6)\n  }\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  };\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className='App'>\n        <h1 className='monsters-pokedex'>Monsters PokeDex</h1>\n        <SearchBox\n          placeholder='Search Monsters'\n          handleChange={this.handleChange}\n        />\n        <Grid monsters={filteredMonsters} />\n      </div>\n    );\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}